Message And Action Passing System
======= maaps ================================================

Python requirements:
    Based on RedHat 6.4 these additional packages (available at epel) has to be installed:
        o) python-requests
        o) python-ply

    Needed because RedHat uses Python 2.6.6
        o) python-argparse

Ziel:
    o) Schnell Abläufe programmieren (Schnell im Sinne von Entwicklungszeit)
    o) Vernünftiges Logging ohne Overhead und einfach konfigurierbares Logging
    o) Laufzeit Sicherheit
        o) Kein Ablauf kann einen anderen beinflussen
        o) Exception Handling
    o) Gleichzeitig laufende Abläufe



Jede App läuft unabhängig.
    In jeder App laufen Chains unabhängig.
        Ausnahme: Wenn eine Chain eine andere aufruft. Dann "teilt" die aufgerufene Chain den
        Globalen Kontext (und auch den/die Exception Handler)


Konfiguration/Programmierung:
    Abläufe sind in "Chains" organisiert
    Chains bestehen aus folgenden Komponenten:
        o) EntryPoint
            o) HttpListener (Webserver, Formular URL-encoded 100% fertig, JSON 10% fertig)
            o) Loop         (führt python code aus, sobald der Code eine "payload" setzt läuft
                             die Chain weiter.)
        o) Modul
            o) Python       (führt python code aus, entwerder "inline" oder in einem File.)

        o) Call
            o) Ruft eine anderen Chain auf (diese teilen sich dann den globalen Kontext)

        o) onException
            o) Exceptionhandler
                o) gilt für die Chain in der er definiert wurde
                o) es kann mehrere geben
                o) Wenn eine Chain eine andere aufruft wird, bei einer Exception,
                   ein Exception Handler nach dem anderen ausgeführt (FIFO).

    Großen Wert wurde auf logging gelegt. Jede Komponente kann über den Logidentifer identifiziert und
    konfiguriert werden. Die globale Konfiguration ist im File logging.conf (TODO: pro App config).

    Properties:
    ------------
    In jedem *.maaps File kann man Platzhalter (eg. ${a.b.c.d}) verwenden. Die entsprechenden Werte
    werden im Application Verzeichnis im File "properties.py" definiert. In diesem File muss ein
    dictionary erzeugt werden das den Namen 'template_data' hat. Die Werte werden noch vor dem
    compilieren des maaps File gesetzt.

    Applikationen:
    ---------------
    Das maaps kann mehrere Applikationen laufen lassen. Die Apps sind im Verzeichnis
    "[MAAPS-INSTALL-DIR]/Applications" definiert. Jede Applikation befindet sich in einem eigenen Unterverzeichnis,
    der Applikationsname ist der Verzeichnisname.

    Jede Applikation hat mindestens eine MAIN.maaps Datei. Darin werden die Apläufe definiert, dabei können auch andere
    Maaps Dateien importiert werden.

    __Achtung__: Applikationen die mit "_" beginnen werden nicht ausgeführt, so kann man kurzfristig
    Applikationen stillegen.


Syntax:
    o) alle Keywords sind case insensitiv.
    o) Identifer können Punkte enthalten. Punkte in Identifer haben nur bei Import-Statements eine Bedeutung.
        Beispiel gültige Identifer:
            chain foo.bar { ... }
            module python _init_data { ... }
            call my101smtp_functions.tools run.this { ... }

    Import Statement::
        Jedes maaps file besteht aus N >= 0 "import" Statements und aus N >= 1 "chain" Statements. Das maaps-file
        "MAIN.maaps" wird als erstes von der Applikation geladen. Maaps Files haben immer ein ".maaps" Suffix,
        das beim Import Statement nicht mit angegeben wird.

            Beispiel:
                Filename: MAIN.maaps
                Inhalt:
                        import helferchen
                        chain TestMe {
                            [Weitere Definitionen]
                        }
                Filename: helferchen.maaps
                Inhalt:
                        import helferchen_des_helferchen
                        chain blabla {
                            [usw]
                        }
                ....

        Zu importierende Files können auch in Verzeichnissen organisiert werden. Der Pfadanteil des Import-Statements wird
        mit einem Punkt getrennt. Verzeichnisnamen sind immer relativ zum Applikationsverzeichnis.

        Beispiel:
            Verzeichnisbaum:

                                myApplication/
                                        |
                                        --- sys/
                                        |     |
                                        |     --- smtp.maaps
                                        |     |
                                        |     --- smtp_helper.maaps
                                        |
                                        --- MAIN.maaps
                                        |
                                        --- mailling.maaps

            Inhalt MAIN.maaps:
                # -----------------------------
                import mailling
                </snip>

            Inhalt mailling.maaps:
                # -----------------------------
                import sys.smtp
                </snip>

            Inhalt smtp.maaps:
                # -----------------------------
                # Obwohl sich dieses File im selben Verzeichnis wie das
                # zu importierende File befindet muss der Pfad relativ
                # zum Applikationsverzeichnis angegeben werrden.
                #
                import sys.smtp_helper
                </snip>



    Chains:
        chain IDENTIFER|STRING {
            entrypoint ...
            ....
            ....
            onException ...
            ....
        }

        Logidentifer: maaps.chain

        Nach dem Keyword "chain" folgt ein Identifer (abcd1234)
        oder ein String (Zeichenkette in Anführungszeichen)

        Falls die chain einen Startpunkt hat muss als erster Eintrag ein entrypoint
        stehen. Es kann auch chains geben ohne entrypoint, diese werden dann von andern
        chains aufgerufen (mit dem "call" Keyword, siehe unten)

        Exceptionhandler (Keyword "onException") können an jeder Stelle (außer vor entrypoints)
        stehen. Sollten aber der Übersichthalber am Ende stehen
        (oder direkt nach einem entrypoint).

        Internal:
        Jede "chain" läuft als eigenständiger Process wenn sie einen Entrypoint aufweist.


    EntryPoints:
        __ HttpListener: __

        entrypoint HttpListener IDENTIFER|STRING {
            Port   = NUMBER
            Adress = STRING
            Path   = STRING
            code   = {
                PYTHON_CODE
            }
        }

        Logidentifer: maaps.entrypoint.httplistener

        The HttpListener waits at "http://Adress:Port/Path" for a POST request with
        Form-Data (UrlEncoded) or JSON-Data (not implemented jet). Default is "http://localhost:8080/".
        The data get's parsed and passed to the next step as "payload" as a dict().

        code - block:
        Der Webserver liest die übermittelten Werte und speichert sie nach payload. Danach wird der
        optionale code-block ausgefüht, dabei hat man nun die Gelegenheit die Werte zu überprüfen und
        auch zu ändern, dazu überschreibt der code-block die payload mit neuen Werten. Soll die Ausführung
        abgebrochen werden muss der code-block eine Exception auslösen oder -um die Ausführung still
        abzubrechen- die payload auf None gesetzt werden. Bei einer Exception wird dem Client ein 500er HTTP
        Statuscode übermittelt.
        TODO: Alles verbessern! (im code-block http-header setzen, client response ...)


        __ LOOP: __

        entrypoint loop IDENTIFER|STRING {
            delay = SECONDS
            code  = {
                PYTHON_CODE
            }
        }

        The LOOP executes the CODE-Block every DELAY seconds. If the CODE-Block set's the payload to a
        value (not None) then the Chain goes further to the next step.

        Internal:        Die Entrypoints starten den HTTPListener bzw den Looper als eigenständigen Process. Dadurch
        umgehen wir dem GIL und können auf Multiprozesor Maschinen die Ressourcen besser nutzen.


    Modules:
        __ python __
        Es gibt zwei Hauptformen um Pythoncode ausführen zu lassen:

        inline:
        -------
        module python IDENTIFER|STRING {
            code = {
                PYTHON_CODE
            }
        }

        in a file:
        ----------
        module python IDENTIFER|STRING {
            Filename = STRING
        }

        Logidentifer:
            Module Core: maaps.module.python
            Python Code: maaps.module.python.code
            (In Ausnahmefällen: maaps.pycode)

        Python Code hat folgende Objecte/Daten zu Verfügung:
            o) payload: Daten die von einem Step zum anderen wandern sollen
            o) logger:  Ein konfigurierter Logger (Aufruf wie ein "normaler"
               Python logger zB: logger.debug(FORMAT, var-arg))
            o) chainvars: Ein dict() um mehr Werte speichern zu können.

        Es können alle dem Python zur Verfügung stehenden Techniken verwendet werden.

        Internal:
        der Python Code läuft als Thread.

    Call:
        Syntax:
            call CHAINNAME STRING|IDENTIFER {
                code = {
                    PYTHON_CODE
                }
            }

        Ruft eine andere Chain auf. Davor kann noch der Context im code-block verändert
        werden zB um Werte weiter zu geben (innerhalb des chainvars dictionary).

    Exceptionhanders:
        onException STRING|IDENTIFER {
            call = CHAINNAME # <== optional
            code = {
                PYTHON_CODE
            }
        }

        Pro chain kann es N ExceptionHandler geben. Diese Handler werden bei allen Exceptions ausgeführt.
        Die Ausführung der chain wird abgebrochen _außer_ wenn der Handler "abort = False" im Python code
        setzt. Die ExceptionHandler gelten nur für die aktuell ausgeführte Chain d.h wenn in einer Chain
        eine andere über "call CHAIN_NAME ..." aufgerufen wird und die Chain CHAIN_NAME eine Exception raised
        und diese Chain hat einen Exceptionhandler dann wird nur dieser Exception Handler ausgeführt (nicht
        der E.H vom Aufrufer.).

        Dem Exceptionhandler steht die Variable "exception" zur Verfügung, sie beinhaltet Text der den
        Fehler genauer beschreibt. zB.

        Bedenke dies:
            Ein ExceptionHandler ist gültig für die Chain in der er definiert wurde, wenn aber eine Chain mit
            "call ...." eine andere Chain aufruft dann teilen sich die Chains den Context und somit auch den
            Wert von "abort". Wenn nun die aufrufende Chains den Wert verändert (zB auf False) dann gilt dieser
            Wert auch für die aufgerufene Chain (im Beispiel -False- würden dann auch alle Schritte nach der
            Exception ausgeführt werden.

        Und das:
            Falls es mehrere ExceptionHandler in einer Chain gibt werden immer alle ausgeführt, auch wenn einer
            davon selbst eine Exception raised.



    Bugs:
    1) linenumering



